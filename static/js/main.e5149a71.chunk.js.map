{"version":3,"sources":["components/NavbarPage.js","App.js","serviceWorker.js","index.js"],"names":["NavbarPage","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","isOpen","toggleCollapse","setState","inherits","createClass","key","value","react_default","a","createElement","mdbreact_esm","className","dark","expand","style","padding","onClick","id","navbar","left","active","to","right","Component","App","NavbarPage_NavbarPage","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5149a71.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavItem, MDBNavLink, MDBNavbarToggler, MDBCollapse } from \"mdbreact\";\r\nimport '../css/NavbarPage.css';\r\n\r\nexport class NavbarPage extends Component {\r\n  state = {\r\n    isOpen: false\r\n  };\r\n\r\n  toggleCollapse = () => {\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <MDBNavbar className=\"nav\" dark expand=\"md\" style={{ padding: 0 }}>\r\n        <strong className=\"navName\">IstudenT</strong>\r\n\r\n        <MDBNavbarToggler className=\"navButton\" onClick={this.toggleCollapse} />\r\n        <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\r\n\r\n          <MDBNavbarNav className=\"leftNav\" left>\r\n            <MDBNavItem active>\r\n              <MDBNavLink className=\"link\" to=\"#!\"> <span>How to start?</span></MDBNavLink>\r\n            </MDBNavItem>\r\n            <MDBNavItem >\r\n              <MDBNavLink className=\"link\" to=\"#!\"><span>About us</span></MDBNavLink>\r\n            </MDBNavItem>\r\n            <MDBNavItem className=\"cont comp hideBlock\">\r\n              <h5 className=\"staticNav t-comp\">IT Company</h5>\r\n            </MDBNavItem>\r\n          </MDBNavbarNav>\r\n\r\n          <MDBNavbarNav className=\"rightNav\" right>\r\n            <MDBNavItem className=\"cont stud hideBlock\">\r\n              <h5 className=\"staticNav t-stud\">Student</h5>\r\n            </MDBNavItem>\r\n            <MDBNavItem>\r\n              <MDBNavLink className=\"link\" to=\"#!\"><span>Login</span></MDBNavLink>\r\n            </MDBNavItem>\r\n            <MDBNavItem>\r\n              <MDBNavLink className=\"link\" to=\"#!\"><span>Create account</span></MDBNavLink>\r\n            </MDBNavItem>\r\n          </MDBNavbarNav>\r\n        </MDBCollapse>\r\n      </MDBNavbar>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './css/App.css';\r\nimport { NavbarPage } from \"./components/NavbarPage\";\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <NavbarPage />\r\n\r\n        {/* main container */}\r\n        <div className=\"main\">\r\n\r\n          <div className=\"topic\">\r\n\r\n            <h2 className=\"leftTitle\">\r\n              For both IT Company and\r\n            </h2>\r\n\r\n            <div className=\"shape\">\r\n              <div className=\"rectangle\">\r\n                <div className=\"emptyRectangle\">\r\n                  <h2 className=\"rightTitle\"> Students</h2>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <p className=\"pTitle\">\r\n              Find a job of your dream<br />\r\n              in any Ukrainian's IT Company<br />\r\n              or find intelligent students on your<br />\r\n              successful project!\r\n            </p>\r\n          </div>\r\n          <div className=\"buttons\">\r\n            <button className=\"companyButton\">Company</button>\r\n            <button className=\"studentButton\">Student</button>\r\n          </div>\r\n        </div>\r\n        {/* end of main container */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(<BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}